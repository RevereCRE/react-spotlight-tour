(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[671],{426:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var o=n(2122),i=n(9756),a=(n(7294),n(3905)),r=["components"],l={sidebar_position:1},s={unversionedId:"intro",id:"intro",isDocsHomePage:!1,title:"Usage",description:"Getting Started",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/react-spotlight-tour/docs/intro",editUrl:"https://github.com/RevereCRE/react-spotlight-tour/edit/main/website/docs/intro.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Lazy Loading",permalink:"/react-spotlight-tour/docs/lazy-loading"}},p=[{value:"Getting Started",id:"getting-started",children:[]},{value:"Adding a Spotlight",id:"adding-a-spotlight",children:[]},{value:"Rendering Options",id:"rendering-options",children:[]},{value:"Controlling Open State",id:"controlling-open-state",children:[]}],u={toc:p};function d(e){var t=e.components,n=(0,i.Z)(e,r);return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"Install React Spotlight Tour using npm or your favorite package manager:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ npm install react-spotlight-tour\n")),(0,a.kt)("p",null,"and you're ready to roll! There's no external CSS or anything to include."),(0,a.kt)("h2",{id:"adding-a-spotlight"},"Adding a Spotlight"),(0,a.kt)("p",null,"React Spotlight Tour is designed to be ",(0,a.kt)("em",{parentName:"p"},"composable")," \u2014 there's very little\npage-level config. Any component under ",(0,a.kt)("inlineCode",{parentName:"p"},"SpotlightTour")," can use the\n",(0,a.kt)("inlineCode",{parentName:"p"},"useSpotlight"),' hook to add an element to the tour. Compared to other libraries\nthis means less centralized config and less "changing this selector over here\nsilently breaks the tour.'),(0,a.kt)("p",null,"Let's start by adding a tour to a small existing app. Lines added to integrate\nReact Spotlight Tour are highlighted in green."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"{4,7,32-36,41}","{4,7,32-36,41}":!0},"// feed.js\nfunction CommentInputBox({ onSubmit }) {\n  const [commentText, setCommentText] = useState('');\n  const spotlightRef = useSpotlight('Click to add a comment', 'right');\n\n  return (\n    <div ref={spotlightRef} style={{ display: 'flex', width: 'max-content' }}>\n      <input\n        value={commentText}\n        onChange={(e) => setCommentText(e.target.value)}\n      />\n\n      <button onClick={onSubmit}>+</button>\n    </div>\n  );\n}\n\nfunction StoryFeedItem({ title, text, addComment }) {\n  return (\n    <div style={{ padding: '1rem' }}>\n      <h1>{title}</h1>\n      <p>{text}</p>\n\n      <CommentInputBox onSubmit={addComment} />\n    </div>\n  );\n}\n\nexport default function Feed() {\n  const [isOpen, setOpen] = useState(true);\n  return (\n    <SpotlightTour\n      open={isOpen}\n      onClose={() => setOpen(false)}\n      Spotlight={Spotlight}\n    >\n      <StoryFeedItem\n        title=\"How-to: Great Product Tours\"\n        text=\"Use React Spotlight Tour!\"\n      />\n    </SpotlightTour>\n  );\n}\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/demo"},"Demo \u27a1\ufe0f")),(0,a.kt)("p",null,"In the example above we see that ",(0,a.kt)("inlineCode",{parentName:"p"},"SpotlightTour")," doesn't need to know what\nelements are included in the tour, it only knows if it should be open or not. To\nadd more elements to our tour all we need to do is call ",(0,a.kt)("inlineCode",{parentName:"p"},"useSpotlight")," in more\nchild components. This approach makes it easy to:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Re-use components that should be highlighted"),(0,a.kt)("li",{parentName:"ol"},"Keep tour changes localized")),(0,a.kt)("h2",{id:"rendering-options"},"Rendering Options"),(0,a.kt)("p",null,"In the above call to ",(0,a.kt)("inlineCode",{parentName:"p"},"useSpotlight")," we passed two arguments:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"text: string")),": Help text to render next to the component. To add new\nlines and accomidate different screensizes React Spotlight Tour accepts\nnewline (",(0,a.kt)("inlineCode",{parentName:"li"},"\\n"),") characters in the help text."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"placement: string?")),": Where to render the help text. One of ",(0,a.kt)("inlineCode",{parentName:"li"},"'top'"),",\n",(0,a.kt)("inlineCode",{parentName:"li"},"'bottom'"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"'left'"),", or ",(0,a.kt)("inlineCode",{parentName:"li"},"'right'"),". Defualts to ",(0,a.kt)("inlineCode",{parentName:"li"},"'bottom'"),".")),(0,a.kt)("p",null,"See the ",(0,a.kt)("a",{parentName:"p",href:"/docs/lazy-loading"},"lazy loading docs")," for information about the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Spotlight")," prop. See the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api"},"API reference")," for additional information."),(0,a.kt)("h2",{id:"controlling-open-state"},"Controlling Open State"),(0,a.kt)("p",null,"Generally you only want to show product tours like this to new users. React\nSpotlight Tour is unopinionated about how it is rendered; the two props that\ncontrol this are ",(0,a.kt)("inlineCode",{parentName:"p"},"open")," on ",(0,a.kt)("inlineCode",{parentName:"p"},"onClose"),". There are many ways to control this\nbehavior but one successfull approach we have seen is:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Give a string name to each tour, such as ",(0,a.kt)("inlineCode",{parentName:"li"},"'home:v1'"),"."),(0,a.kt)("li",{parentName:"ol"},"Embed a list of product tours the user has already seen in the initial HTML."),(0,a.kt)("li",{parentName:"ol"},"When a user lands on the page containing a tutorial check if the name appears\nin the already seen list. If it doesn't set ",(0,a.kt)("inlineCode",{parentName:"li"},"open={true}"),", otherwise ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),".\nWhen closing the open tutorial add the tutorial name to the list of seen\ntutorials and send an HTTP request to your server persisting this state.")),(0,a.kt)("p",null,"Example implementation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function useSpotlightOpenState(name, initialSeenTutorials) {\n  const [seenTutorials, setSeenTutorials] = useState(\n    initialSeenTutorials ?? []\n  );\n\n  const isOpen = useMemo(() => {\n    return user != null && !seenTutorials.includes(name);\n  }, [user, name, seenTutorials]);\n\n  const markSeen = useCallback(() => {\n    if (seenTutorials.includes(name)) return;\n\n    const nextSeenTutorials = [...seenTutorials, name];\n    setSeenTutorials(nextSeenTutorials);\n\n    // We don't need the reponse here, just need to make sure the server sees this.\n    // If this request fails the next tutorial request will include this tutorial.\n    fetch(`/api/user/tutorial`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        seenTutorials: nextSeenTutorials,\n      }),\n    });\n  }, [seenTutorials, name]);\n\n  return [isOpen, markSeen];\n}\n\nfunction HomePage() {\n  // ...\n  const [isSpotlightOpen, closeSpotlight] = useSpotlightOpenState(\n    'home:v1',\n    window.initialSeenTutorials\n  );\n\n  return (\n    <SpotlightTour\n      open={isSpotlightOpen}\n      onClose={closeSpotlight}\n      Spotlight={Spotlight}\n    >\n      {/* ... */}\n    </SpotlightTour>\n  );\n}\n")))}d.isMDXComponent=!0}}]);